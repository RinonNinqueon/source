;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.06.2013
;Author  : NeVaDa
;Company : SBE Software
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#define SetBit(x,y) (x|=y)
;#define ClrBit(x,y) (x&=~y)
;#define TestBit(x,y) (x&y)
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "midi.c"
;#define SYSEX        0xf0
;#define SYSCOMUNDEF     0xf1
;#define SYSCOMSONGPOS   0xf2
;#define SYSCOMSONGSEL   0xf3
;#define SYSCOMUNDEF1 0xf4
;#define SYSCOMUNDEF2 0xf5
;#define SYSCOMTUNEREQ   0xf6
;#define SYSEXEND     0xf7
;#define SYSRTCLOCK      0xf8
;#define SYSRTUNDEF      0xf9
;#define SYSRTSTART      0xfa
;#define SYSRTCONTINUE   0xfb
;#define SYSRTSTOP    0xfc
;#define SYSRTUNDEF1     0xfd
;#define SYSRTACTIVESEN  0xfe
;#define SYSRTRESET      0xff
;#define NOTEON 0x90
;#define NOTEOFF   0x80
;#define NOTEPRES  0xa0     //note pressure
;#define CHANPRES  0xb0     //channel pressure
;#define CONTROL   0xd0        //control change
;#define WHEEL  0xe0        //pitch wheel change
;#define PATCH  0xc0        //patch change
;#define MIDI_CLOCK   0x80
;#define MIDI_START   0x40
;#define MIDI_RESET   0x20
;#define MIDI_GATE 0x01
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;char status,data;
;status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;   {
;   rx_buffer[rx_wr_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;   if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;      {
;      rx_counter=0;
;PCODE: $00000026 VOL: 0
;      rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;      };
;PCODE: $0000002A VOL: 0
;   };
;PCODE: $0000002B VOL: 0
;}
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;char data;
;while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;data=rx_buffer[rx_rd_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;#asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
;--rx_counter;
;PCODE: $00000044 VOL: 0
;#asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
;return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;}
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
;{
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;   {
;   --tx_counter;
;PCODE: $0000004F VOL: 0
;   UDR=tx_buffer[tx_rd_index];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;   if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;   };
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;}
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
;{
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;#asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;   {
;   tx_buffer[tx_wr_index]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;   if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;   ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;   }
;else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;   UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;#asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
;}
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;//3,4,5
;#define port_sh PORTA
;#define pin_sh  0x02
;#define pin_st  0x04
;#define pin_d   0x01
;
;unsigned char i = 0, j = 1, k = 0;
;char okt = 0;
;unsigned char chn = 0;
;//unsigned char split = 0;
;//unsigned char split_is = 0;
;unsigned char str_okt[16];
;unsigned char str_manual[] = "Upper manual";

	.DSEG
;unsigned char last = 0;
;unsigned char _ports[6];
;
;void shift_out(unsigned char data, unsigned char channel)
; 0000 0031 {

	.CSEG
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0032 	ClrBit(port_sh, pin_st << channel);
;	data -> Y+1
;	channel -> Y+0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0033     ClrBit(port_sh, pin_sh);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0034 
; 0000 0035     delay_us(1000);
;PCODE: $00000091 VOL: 0
; 0000 0036 
; 0000 0037 	for(i = 0; i < 8; i++)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0038 	{
; 0000 0039 		if(data & 0x80)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 003A 			SetBit(port_sh, pin_d);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 003B 		else
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 003C 			ClrBit(port_sh, pin_d);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 003D 
; 0000 003E 		delay_us(1000);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 003F 		SetBit(port_sh, pin_sh);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0040 
; 0000 0041 		delay_us(1000);
;PCODE: $000000A6 VOL: 0
; 0000 0042 		ClrBit(port_sh, pin_sh);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0043 		data <<= 1;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0044 	}
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0045     SetBit(port_sh, pin_st << channel);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0046 }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 004B {
;PCODE: $000000BA VOL: 0
; 0000 004C // Declare your local variables here
; 0000 004D     char c;
; 0000 004E    char cmd;
; 0000 004F    char chan;
; 0000 0050    unsigned char n_addr = 0b01000000;
; 0000 0051    unsigned char n_bit =  0b00001001;
; 0000 0052    unsigned char n_on = 0, n_off = 0;
; 0000 0053    _ports[0] = 0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;	c -> R17
;	cmd -> R16
;	chan -> R19
;	n_addr -> R18
;	n_bit -> R21
;	n_on -> R20
;	n_off -> Y+0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0054    _ports[1] = 0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0055    _ports[2] = 0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0056    _ports[3] = 0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0057    _ports[4] = 0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0058    _ports[5] = 0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0059 
; 0000 005A // Input/Output Ports initialization
; 0000 005B // Port A initialization
; 0000 005C // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 005D // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 005E PORTA=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 005F DDRA=0xFF;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0060 
; 0000 0061 // Port B initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0064 PORTB=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0065 DDRB=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0066 
; 0000 0067 // Port C initialization
; 0000 0068 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0069 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006A PORTC=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 006B DDRC=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 006C 
; 0000 006D // Port D initialization
; 0000 006E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0070 PORTD=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0071 DDRD=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0072 
; 0000 0073 // Timer/Counter 0 initialization
; 0000 0074 // Clock source: System Clock
; 0000 0075 // Clock value: Timer 0 Stopped
; 0000 0076 // Mode: Normal top=FFh
; 0000 0077 // OC0 output: Disconnected
; 0000 0078 TCCR0=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0079 TCNT0=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 007A OCR0=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 1 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: Timer1 Stopped
; 0000 007F // Mode: Normal top=FFFFh
; 0000 0080 // OC1A output: Discon.
; 0000 0081 // OC1B output: Discon.
; 0000 0082 // Noise Canceler: Off
; 0000 0083 // Input Capture on Falling Edge
; 0000 0084 // Timer1 Overflow Interrupt: Off
; 0000 0085 // Input Capture Interrupt: Off
; 0000 0086 // Compare A Match Interrupt: Off
; 0000 0087 // Compare B Match Interrupt: Off
; 0000 0088 TCCR1A=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0089 TCCR1B=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 008A TCNT1H=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 008B TCNT1L=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 008C ICR1H=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 008D ICR1L=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 008E OCR1AH=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 008F OCR1AL=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0090 OCR1BH=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0091 OCR1BL=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0092 
; 0000 0093 // Timer/Counter 2 initialization
; 0000 0094 // Clock source: System Clock
; 0000 0095 // Clock value: Timer2 Stopped
; 0000 0096 // Mode: Normal top=FFh
; 0000 0097 // OC2 output: Disconnected
; 0000 0098 ASSR=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0099 TCCR2=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 009A TCNT2=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 009B OCR2=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 009C 
; 0000 009D // External Interrupt(s) initialization
; 0000 009E // INT0: Off
; 0000 009F // INT1: Off
; 0000 00A0 // INT2: Off
; 0000 00A1 MCUCR=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00A2 MCUCSR=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A3 
; 0000 00A4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A5 TIMSK=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00A6 
; 0000 00A7 // USART initialization
; 0000 00A8 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A9 // USART Receiver: On
; 0000 00AA // USART Transmitter: On
; 0000 00AB // USART Mode: Asynchronous
; 0000 00AC // USART Baud Rate: 38400
; 0000 00AD UCSRA=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00AE UCSRB=0xD8;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AF UCSRC=0x86;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00B0 UBRRH=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00B1 //UBRRL=0x1F;
; 0000 00B2 UBRRL=0x19;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00B3 
; 0000 00B4 // Analog Comparator initialization
; 0000 00B5 // Analog Comparator: Off
; 0000 00B6 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B7 ACSR=0x80;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00B8 SFIOR=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00B9 
; 0000 00BA #asm("sei")
;PCODE: $0000011B VOL: 0
	sei
;PCODE: $0000011C VOL: 0
; 0000 00BB 
; 0000 00BC while (1)
;PCODE: $0000011D VOL: 0
; 0000 00BD       {
; 0000 00BE         c = getchar();
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00BF //        n_bit = 0;
; 0000 00C0         if(c & 0x80)  //is it a command?
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00C1         {
; 0000 00C2             if(c < 0xf0)
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00C3              {
; 0000 00C4                 //process this stuff, dispose of everything else
; 0000 00C5                 cmd = (char)(c & 0xf0);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00C6                 chan = (char)(c & 0x0f);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C7              }
; 0000 00C8         }
;PCODE: $0000012C VOL: 0
; 0000 00C9         else
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00CA         {
; 0000 00CB /*            if (split_is && c < split)
; 0000 00CC             {
; 0000 00CD                 if (last != cmd | chan)
; 0000 00CE                     putchar(cmd | chan);
; 0000 00CF                 putchar(c);
; 0000 00D0                 c = getchar();
; 0000 00D1                 putchar(c);
; 0000 00D2                 last = cmd | chan;
; 0000 00D3                 continue;
; 0000 00D4             }
; 0000 00D5 */
; 0000 00D6 //            if (chan == chn)
; 0000 00D7             {
; 0000 00D8 //                char diff = (okt - 2) * 12;
; 0000 00D9 //                if (c + diff >= 0)
; 0000 00DA                 {
; 0000 00DB //                    c += (okt - 2) * 12;
; 0000 00DC                     n_addr = (c - 0x18) / 8;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00DD 
; 0000 00DE                     n_bit = 1 << ((c-0x18) % 8);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00DF                     if (n_addr < 6)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E0                      switch (cmd)
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00E1                      {
; 0000 00E2                         case NOTEOFF:
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00E3                             ClrBit(_ports[n_addr], n_bit);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00E4                             shift_out(_ports[n_addr], n_addr);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00E5                             n_off = c;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00E6                             break;
;PCODE: $00000159 VOL: 0
; 0000 00E7 
; 0000 00E8                         case NOTEON:
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00E9                             SetBit(_ports[n_addr], n_bit);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00EA                             shift_out(_ports[n_addr], n_addr);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00EB                             n_on = c;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00EC                             break;
;PCODE: $0000016C VOL: 0
; 0000 00ED 
; 0000 00EE /*                        case CHANPRES:
; 0000 00EF                             write_reg(0b01000000, OLAT, all_notes_off);
; 0000 00F0                             write_reg(0b01000010, OLAT, all_notes_off);
; 0000 00F1                             write_reg(0b01000100, OLAT, all_notes_off);
; 0000 00F2                             write_reg(0b01000110, OLAT, all_notes_off);
; 0000 00F3                             write_reg(0b01001000, OLAT, all_notes_off);
; 0000 00F4                             write_reg(0b01001010, OLAT, all_notes_off);
; 0000 00F5                             write_reg(0b01001100, OLAT, all_notes_off);
; 0000 00F6                             write_reg(0b01001110, OLAT, all_notes_off);
; 0000 00F7                             break;*/
; 0000 00F8                      }
;PCODE: $0000016D VOL: 0
; 0000 00F9         //             sprintf(str_on, "Note on:\t%i\n", n_on);
; 0000 00FA         //             sprintf(str_off, "Note off:\t%i\n", n_off);
; 0000 00FB         //
; 0000 00FC         //             lcd_clear();
; 0000 00FD         //             lcd_puts(str_on);
; 0000 00FE         //             lcd_puts(str_off);
; 0000 00FF                      c = getchar();
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0100                   }
; 0000 0101             }
; 0000 0102           }
;PCODE: $00000171 VOL: 0
; 0000 0103       // Place your code here
; 0000 0104 /*        shift_out(j, k);
; 0000 0105 
; 0000 0106         if (j == 0x80)
; 0000 0107         {
; 0000 0108             delay_ms(100);
; 0000 0109             shift_out(0, k);
; 0000 010A             j = 1;
; 0000 010B             k++;
; 0000 010C             if (k > 5)
; 0000 010D                 k = 0;
; 0000 010E         }
; 0000 010F         else
; 0000 0110         {
; 0000 0111             j <<= 1;
; 0000 0112             delay_ms(100);
; 0000 0113         }     */
; 0000 0114       };
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0115 }
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
