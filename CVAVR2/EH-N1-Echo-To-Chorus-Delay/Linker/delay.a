;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07.04.2013
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000A VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 001C #endasm
;#include <lcd.h>
;
;#define SetBit(x,y) (x|=y)
;#define ClrBit(x,y) (x&=~y)
;#define TestBit(x,y) (x&y)
;
;#define D_LEFT	0
;#define D_NONE	1
;#define D_RIGHT	2
;
;#define p_c 0b00000001
;#define p_d 0b00000010
;#define p_r	0b00000100
;#define p_l	0b00001000
;#define p_e 0b00010000
;#define enc	PIND
;
;#define _dir_cnt 4
;#define _dir_cnt2 8
;
;/*-------SPI------*/
;
;#define nSS			3
;#define SDI 		5
;#define	SCK			6
;
;#define	SPI_PORT	PORTD
;
;#define HI(x) SPI_PORT |= (1<<(x))
;#define LO(x) SPI_PORT &= ~(1<<(x))
;
;#define max_time  0xFF
;#define max_ee 5
;
;flash unsigned int times[256]= {   0,    0,    1,    2,    3,    4,    5,    6,    7,    8,    8,    9,    9,   10,   10,   11,              //   0 -  15
;                                  11,   12,   12,   13,   13,   14,   14,   15,   15,   16,   16,   17,   17,   18,   18,   19,              //  16 -  31
;                                  19,   20,   20,   21,   21,   22,   22,   23,   23,   24,   24,   25,   25,   26,   26,   27,              //  32 -  47
;                                  27,   28,   28,   29,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,              //  48 -  63
;                                  41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,              //  64 -  79
;                                  57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,              //  80 -  95
;                                  73,   75,   77,   79,   81,   83,   85,   87,   89,   91,   93,   95,   97,   99,  101,  103,              //  96 - 111
;                                 105,  107,  109,  111,  113,  115,  117,  119,  122,  125,  127,  130,  133,  136,  139,  142,              // 112 - 127
;                                 145,  148,  149,  150,  155,  157,  159,  164,  166,  170,  174,  177,  180,  184,  188,  193,              // 128 - 143
;                                 200,  204,  208,  212,  216,  220,  225,  230,  235,  240,  245,  250,  255,  260,  265,  270,              // 144 - 159
;                                 276,  282,  288,  294,  300,  306,  312,  318,  324,  331,  339,  347,  355,  364,  372,  380,              // 160 - 175
;                                 390,  398,  406,  414,  422,  430,  438,  446,  454,  462,  470,  480,  490,  500,  510,  520,              // 176 - 191
;                                 530,  540,  553,  566,  579,  592,  605,  618,  631,  644,  657,  670,  685,  698,  711,  724,              // 192 - 207
;                                 740,  750,  767,  783,  800,  817,  834,  851,  868,  885,  902,  919,  934,  953,  970,  987,              // 208 - 223
;                                1000, 1033, 1066, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1330, 1350, 1380, 1400,              // 224 - 239
;                                1440, 1450, 1500, 1533, 1563, 1600, 1633, 1669, 1700, 1733, 1766, 1800, 1833, 1866, 1900, 2000};             // 240 - 255
;
;unsigned char time = 0, time_c = 0;
;unsigned char lock0 = 0;
;unsigned char cmd1 = 0b00010001;
;unsigned char i;
;unsigned char val1, val2, val3, val4;
;unsigned char e1 = 0, e2 = 0;
;unsigned char dir = 2, dir_cnt = _dir_cnt;

	.DSEG
;volatile unsigned char v_time[max_ee];
;
;
;void setRes(unsigned char cmd2)
; 0000 005B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005C     cmd1 = 0b00010001;
;	cmd2 -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 005D 	LO(SCK);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005E 	delay_us(1);
;PCODE: $00000013 VOL: 0
; 0000 005F 	PORTB &= ~0b00001000;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0060 	delay_us(1);
;PCODE: $00000016 VOL: 0
; 0000 0061 
; 0000 0062 	for(i = 0; i < 8; i++)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0063 	{
; 0000 0064 		if(cmd1 & 0x80)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0065 			SPI_PORT |= 0b00100000; //HI(SDI);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0066 		else
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0067 			SPI_PORT &= ~0b00100000;//LO(SDI);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0068 
; 0000 0069 		delay_us(1);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006A 		SPI_PORT |= 0b01000000;//HI(SCK);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 006B 
; 0000 006C 		delay_us(1);
;PCODE: $0000002B VOL: 0
; 0000 006D 		SPI_PORT &= ~0b01000000;//LO(SCK);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006E 		cmd1 <<= 1;
;PCODE: $0000002E VOL: 0
; 0000 006F 	}
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0070 
; 0000 0071 
; 0000 0072 	for(i = 0; i < 8; i++)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0073 	{
; 0000 0074 		if(cmd2 & 0x80)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0075 			SPI_PORT |= 0b00100000; //HI(SDI);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0076 		else
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0077 			SPI_PORT &= ~0b00100000;//LO(SDI);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0078 
; 0000 0079 		delay_us(1);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007A 		SPI_PORT |= 0b01000000;//HI(SCK);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 007B 
; 0000 007C 		delay_us(1);
;PCODE: $00000047 VOL: 0
; 0000 007D 		SPI_PORT &= ~0b01000000;//LO(SCK);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007E 		cmd2 <<= 1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007F 	}
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0080 
; 0000 0081 	delay_us(1);
;PCODE: $00000051 VOL: 0
; 0000 0082 	PORTB |= 0b00001000; //(1<<(nSS));
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0083 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void LCDWriteInt(unsigned int val)
; 0000 0086 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0087 	/***************************************************************
; 0000 0088 	This function writes a integer type value to LCD module
; 0000 0089 
; 0000 008A 	Arguments:
; 0000 008B 	1)unsigned char val	: Value to print
; 0000 008C 
; 0000 008D 	2)unsigned char field_length :total length of field in which the value is printed
; 0000 008E 	must be between 1-3 if it is -1 the field length is no of digits in the val
; 0000 008F 
; 0000 0090 	****************************************************************/
; 0000 0091 
; 0000 0092     val1 = val % 10;
;	val -> Y+0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0093     val2 = (val / 10) % 10;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0094     val3 = (val / 100) % 10;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0095     val4 = (val / 1000) % 10;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0096 
; 0000 0097     if (val4 != 0)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0098     lcd_putchar(48 + val4);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0099     if (val3 != 0 || val4 != 0)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009A     lcd_putchar(48 + val3);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009B     if (val2 != 0 || val3 != 0 || val4 != 0)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 009C     lcd_putchar(48 + val2);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 009D     lcd_putchar(48 + val1);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009E }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;void lcd_out(void)
; 0000 00A1 {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A2     lcd_clear();
;PCODE: $0000009F VOL: 0
; 0000 00A3 
; 0000 00A4 	lcd_puts("  Preset #");
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A5 //    lcd_putchar(' ');
; 0000 00A6 
; 0000 00A7     if (time > 0)	lcd_putchar('<');	else	lcd_putchar(' ');
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A8 	LCDWriteInt(time+1);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A9 	if (time < max_ee - 1)	lcd_putchar('>');	else	lcd_putchar(' ');
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AA 
; 0000 00AB 	lcd_gotoxy(3, 1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00AC 
; 0000 00AD 	if (time_c > 0)			lcd_putchar('<');	else	lcd_putchar(' ');
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00AE 	LCDWriteInt(times[time_c]);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00AF 	if (time_c < max_time)	lcd_putchar('>');	else	lcd_putchar(' ');
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B0 
; 0000 00B1 	lcd_puts(" ms");
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B2 }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0

	.DSEG
_0x15:
	.BYTE 0xF
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00B6 {

	.CSEG
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B7 // Place your code here
; 0000 00B8     if (TestBit(enc, p_r) && TestBit(enc, p_l))
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B9         e1 = 0;
;PCODE: $000000F8 VOL: 0
; 0000 00BA     if (!TestBit(enc, p_r) && TestBit(enc, p_l))
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00BB         e1 = 1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BC     if (!TestBit(enc, p_r) && !TestBit(enc, p_l))
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00BD         e1 = 2;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00BE     if (TestBit(enc, p_r) && !TestBit(enc, p_l))
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00BF         e1 = 3;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00C0 
; 0000 00C1     switch (e2)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C2     {
; 0000 00C3         case 0: if (e1 == 1)
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C4                     dir = 0;
;PCODE: $00000127 VOL: 0
; 0000 00C5                 if (e1 == 3)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C6                     dir = 2;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C7                 break;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00C8         case 1: if (e1 == 2)
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00C9                     dir = 0;
;PCODE: $00000136 VOL: 0
; 0000 00CA                 if (e1 == 0)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00CB                     dir = 2;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00CC                 break;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00CD         case 2: if (e1 == 3)
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00CE                     dir = 0;
;PCODE: $00000144 VOL: 0
; 0000 00CF                 if (e1 == 1)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D0                     dir = 2;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00D1                 break;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D2         case 3: if (e1 == 0)
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00D3                     dir = 0;
;PCODE: $00000152 VOL: 0
; 0000 00D4                 if (e1 == 2)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00D5                     dir = 2;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D6                 break;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00D7     }
;PCODE: $0000015B VOL: 0
; 0000 00D8 
; 0000 00D9     e2 = e1;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00DA }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;
;void main(void)
; 0000 00DD {
;PCODE: $00000161 VOL: 0
; 0000 00DE // Declare your local variables here
; 0000 00DF 
; 0000 00E0 // Crystal Oscillator division factor: 1
; 0000 00E1 #pragma optsize-
; 0000 00E2 CLKPR=0x80;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E3 CLKPR=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00E4 #ifdef _OPTIMIZE_SIZE_
; 0000 00E5 #pragma optsize+
; 0000 00E6 #endif
; 0000 00E7 
; 0000 00E8 // Input/Output Ports initialization
; 0000 00E9 // Port A initialization
; 0000 00EA // Func2=In Func1=In Func0=In
; 0000 00EB // State2=T State1=T State0=T
; 0000 00EC PORTA=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00ED DDRA=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00EE 
; 0000 00EF // Port B initialization
; 0000 00F0 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00F1 // State7=0 State6=0 State5=0 State4=0 State3=1 State2=0 State1=0 State0=0
; 0000 00F2 PORTB=0x08;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00F3 DDRB=0xFF;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00F4 
; 0000 00F5 // Port D initialization
; 0000 00F6 // Func6=Out Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00F7 // State6=0 State5=0 State4=P State3=P State2=P State1=P State0=P
; 0000 00F8 PORTD=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00F9 DDRD=0x60;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00FA 
; 0000 00FB 
; 0000 00FC // Timer/Counter 0 initialization
; 0000 00FD // Clock source: System Clock
; 0000 00FE // Clock value: 1000,000 kHz
; 0000 00FF // Mode: Normal top=FFh
; 0000 0100 // OC0A output: Disconnected
; 0000 0101 // OC0B output: Disconnected
; 0000 0102 TCCR0A=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0103 TCCR0B=0x02;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0104 TCNT0=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0105 OCR0A=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0106 OCR0B=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0107 
; 0000 0108 // Timer/Counter 1 initialization
; 0000 0109 // Clock source: System Clock
; 0000 010A // Clock value: 8000,000 kHz
; 0000 010B // Mode: CTC top=OCR1A
; 0000 010C // OC1A output: Discon.
; 0000 010D // OC1B output: Discon.
; 0000 010E // Noise Canceler: Off
; 0000 010F // Input Capture on Falling Edge
; 0000 0110 // Timer1 Overflow Interrupt: Off
; 0000 0111 // Input Capture Interrupt: Off
; 0000 0112 // Compare A Match Interrupt: On
; 0000 0113 // Compare B Match Interrupt: Off
; 0000 0114 TCCR1A=0x00;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0115 TCCR1B=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0116 TCNT1H=0x00;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0117 TCNT1L=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0118 ICR1H=0x00;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0119 ICR1L=0x00;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 011A OCR1AH=0x00;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 011B OCR1AL=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 011C OCR1BH=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 011D OCR1BL=0x00;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 011E 
; 0000 011F // External Interrupt(s) initialization
; 0000 0120 // INT0: On
; 0000 0121 // INT0 Mode: Falling Edge
; 0000 0122 // INT1: Off
; 0000 0123 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0124 //GIMSK=0x40;
; 0000 0125 //MCUCR=0x02;
; 0000 0126 //EIFR=0x40;
; 0000 0127 
; 0000 0128 GIMSK=0x00;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0129 MCUCR=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 012A EIFR=0x00;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 012B 
; 0000 012C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012D TIMSK=0x02;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 012E 
; 0000 012F // Universal Serial Interface initialization
; 0000 0130 // Mode: Disabled
; 0000 0131 // Clock source: Register & Counter=no clk.
; 0000 0132 // USI Counter Overflow Interrupt: Off
; 0000 0133 USICR=0x00;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0134 
; 0000 0135 // Analog Comparator initialization
; 0000 0136 // Analog Comparator: Off
; 0000 0137 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0138 ACSR=0x80;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0139 
; 0000 013A // LCD module initialization
; 0000 013B lcd_init(16);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 013C 
; 0000 013D lcd_clear();
;PCODE: $0000019F VOL: 0
; 0000 013E lcd_puts("Electro-Harmonix");
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 013F delay_ms(1000);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0140 lcd_gotoxy(0, 1);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0141 lcd_puts("  #1 Echo by");
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0142 delay_ms(1000);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0143 lcd_gotoxy(0, 1);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0144 //lcd_puts("  Digital Delay");
; 0000 0145 lcd_puts(" Rinon Ninqueon");
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0146 delay_ms(1000);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0147 
; 0000 0148 //lcd_clear();
; 0000 0149 //lcd_gotoxy(0, 0);
; 0000 014A //lcd_puts("  Digital Delay ");
; 0000 014B //lcd_gotoxy(0, 1);
; 0000 014C //lcd_puts(" Rinon Ninqueon ");
; 0000 014D 
; 0000 014E //delay_ms(1000);
; 0000 014F 
; 0000 0150 
; 0000 0151 lcd_out();
;PCODE: $000001BF VOL: 0
; 0000 0152 // Global enable interrupts
; 0000 0153 #asm("sei")
;PCODE: $000001C0 VOL: 0
	sei
;PCODE: $000001C1 VOL: 0
; 0000 0154 
; 0000 0155 i = 0;
;PCODE: $000001C2 VOL: 0
; 0000 0156 while (i < max_ee)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0157     v_time[i++] = 175;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 1
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0159 time_c = v_time[0];
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 1
; 0000 015A 
; 0000 015B setRes(time_c);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 015C 
; 0000 015D while (1)
;PCODE: $000001D2 VOL: 0
; 0000 015E {
; 0000 015F     if (dir != 1)               //îáðàáîòêà ýíêîäåðà
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0160     {
; 0000 0161         if (dir == 0)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0162         {
; 0000 0163             if (dir_cnt == 0)
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0164 		    {
; 0000 0165                 if (time_c > 0)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0166     	    	    time_c--;
;PCODE: $000001DE VOL: 0
; 0000 0167                 dir_cnt = _dir_cnt;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0168             }
; 0000 0169             dir_cnt--;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 016A         }
; 0000 016B         else
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 016C         {
; 0000 016D             if (dir_cnt == _dir_cnt2)
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 016E             {
; 0000 016F                 if (time_c < max_time)
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0170         		    time_c++;
;PCODE: $000001EE VOL: 0
; 0000 0171                 dir_cnt = _dir_cnt;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0172             }
; 0000 0173             dir_cnt++;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0174         }
;PCODE: $000001F6 VOL: 0
; 0000 0175 
; 0000 0176     	setRes(time_c);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0177 
; 0000 0178         dir = 1;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0179 		lcd_out();
;PCODE: $000001FB VOL: 0
; 0000 017A     }
; 0000 017B 
; 0000 017C 
; 0000 017D 	if (!TestBit(enc, p_c))     //ïðåäûäóùèé ïðåñåò
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 017E 	{
; 0000 017F 		if (!TestBit(lock0, 0x01))
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0180 		{
; 0000 0181 			SetBit(lock0, 0x01);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0182 
; 0000 0183             v_time[time] = time_c;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 1
;PCODE: $00000208 VOL: 0
; 0000 0184 
; 0000 0185             if (time > 0)
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0186                 time--;
;PCODE: $0000020C VOL: 0
; 0000 0187 
; 0000 0188             time_c = v_time[time];
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 1
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0189             setRes(time_c);
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 018A 			lcd_out();
;PCODE: $00000213 VOL: 0
; 0000 018B 		}
; 0000 018C 	}
;PCODE: $00000214 VOL: 0
; 0000 018D 	else
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 018E 		ClrBit(lock0, 0x01);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 018F 
; 0000 0190     if (!TestBit(enc, p_d))     //ñëåäóþùèé ïðåñåò
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0191 	{
; 0000 0192 		if (!TestBit(lock0, 0x02))
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0193 		{
; 0000 0194 			SetBit(lock0, 0x02);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0195             v_time[time] = time_c;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 1
;PCODE: $00000226 VOL: 0
; 0000 0196 
; 0000 0197             if (time < max_ee-1)
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0198                 time++;
;PCODE: $0000022A VOL: 0
; 0000 0199             time_c = v_time[time];
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 1
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 019A             setRes(time_c);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 019B 			lcd_out();
;PCODE: $00000231 VOL: 0
; 0000 019C 		}
; 0000 019D 	}
;PCODE: $00000232 VOL: 0
; 0000 019E 	else
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 019F 		ClrBit(lock0, 0x02);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01A0 }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 01A1 }
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0

	.DSEG
_0x39:
	.BYTE 0x2E
