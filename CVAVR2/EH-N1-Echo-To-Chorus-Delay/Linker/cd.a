;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07.04.2013
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000A VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 001C #endasm
;#include <lcd.h>
;
;#define SetBit(x,y) (x|=y)
;#define ClrBit(x,y) (x&=~y)
;#define TestBit(x,y) (x&y)
;
;#define D_LEFT	0
;#define D_NONE	1
;#define D_RIGHT	2
;
;#define p_c 0b00000001
;#define p_d 0b00000010
;#define p_r	0b00000100
;#define p_l	0b00001000
;#define p_e 0b00010000
;#define enc	PIND
;
;/*-------SPI------*/
;
;#define nSS			3
;#define SDI 		5
;#define	SCK			6
;
;#define	SPI_PORT	PORTD
;
;#define HI(x) SPI_PORT |= (1<<(x))
;#define LO(x) SPI_PORT &= ~(1<<(x))
;
;#define max_depth 0x0F
;#define max_speed 0xFF
;#define min_speed 0x05
;#define max_time  0xFF
;
;//unsigned char ch_dir = 1;
;unsigned char dp_cnt = 0;
;unsigned char time = 0x7F;
;unsigned char ch_depth = 0x19, ch_speed = 0xFF;
;unsigned char lock0 = 0;
;unsigned char main_menu = 0;
;unsigned char max_menu = 0;
;unsigned char i, j, val1, val2, val3, e1 = 0, e2 = 0, dir = 1, ch_on = 0;

	.DSEG
;
;//unsigned char text_speed[]  = "Ch.Speed";
;
;void inline chorus_on(void)
; 0000 004A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004B 	dp_cnt = ch_depth;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004C 	SetBit(lock0, 0x04);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 004D 	SetBit(TCCR1B, 0x0B);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 004E //	TCCR0B=0x09;
; 0000 004F 	max_menu = 2;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0050     ch_on = 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0051 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;void inline chorus_off(void)
; 0000 0054 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0055 	ClrBit(TCCR1B, 0x0B);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0056     ch_on = 0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0057 	if (main_menu > max_menu)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0058 	{
; 0000 0059 		max_menu = 0;
;PCODE: $00000027 VOL: 0
; 0000 005A 		main_menu = 0;
;PCODE: $00000028 VOL: 0
; 0000 005B 	}
; 0000 005C }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;void setRes(unsigned char cmd2)
; 0000 005F {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0060 	unsigned char cmd1 = 0b00010001;
; 0000 0061 
; 0000 0062 	LO(SCK);
;PCODE: $0000002E VOL: 0
;	cmd2 -> Y+1
;	cmd1 -> R17
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0063 	delay_us(1);
;PCODE: $00000033 VOL: 0
; 0000 0064 	PORTB &= ~(1<<(nSS));
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0065 	delay_us(1);
;PCODE: $00000036 VOL: 0
; 0000 0066 
; 0000 0067 	for(i = 0; i < 8; i++)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0068 	{
; 0000 0069 		if(cmd1 & 0x80)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006A 			HI(SDI);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006B 		else
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006C 			LO(SDI);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006D 
; 0000 006E 		delay_us(1);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006F 		HI(SCK);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0070 
; 0000 0071 		delay_us(1);
;PCODE: $0000004B VOL: 0
; 0000 0072 		LO(SCK);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0073 		cmd1 <<= 1;
;PCODE: $0000004E VOL: 0
; 0000 0074 	}
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0075 
; 0000 0076 
; 0000 0077 	for(i = 0; i < 8; i++)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0078 	{
; 0000 0079 		if(cmd2 & 0x80)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 007A 			HI(SDI);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007B 		else
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007C 			LO(SDI);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007D 
; 0000 007E 		delay_us(1);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007F 		HI(SCK);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0080 
; 0000 0081 		delay_us(1);
;PCODE: $00000067 VOL: 0
; 0000 0082 		LO(SCK);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0083 		cmd2 <<= 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0084 	}
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0085 
; 0000 0086 	delay_us(1);
;PCODE: $00000071 VOL: 0
; 0000 0087 	PORTB |= (1<<(nSS));
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0088 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;void LCDWriteInt(unsigned char val)
; 0000 008B {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008C 	/***************************************************************
; 0000 008D 	This function writes a integer type value to LCD module
; 0000 008E 
; 0000 008F 	Arguments:
; 0000 0090 	1)unsigned char val	: Value to print
; 0000 0091 
; 0000 0092 	2)unsigned char field_length :total length of field in which the value is printed
; 0000 0093 	must be between 1-3 if it is -1 the field length is no of digits in the val
; 0000 0094 
; 0000 0095 	****************************************************************/
; 0000 0096 //	unsigned char str[3];
; 0000 0097 
; 0000 0098     j = 0;
;	val -> Y+0
;PCODE: $0000007B VOL: 0
; 0000 0099     i = 2;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009A 
; 0000 009B     val1 = val % 10;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009C     val2 = (val / 10) % 10;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009D     val3 = (val / 100) % 10;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 009E 
; 0000 009F //	while(val1)
; 0000 00A0 //	{
; 0000 00A1 //		str[i] = val1 % 10;
; 0000 00A2 //		val1 = val1 / 10;
; 0000 00A3 //		i--;
; 0000 00A4 //	}
; 0000 00A5 
; 0000 00A6 //	j = 3 - field_length;
; 0000 00A7 
; 0000 00A8 //    if (val > 100)
; 0000 00A9         lcd_putchar(48 + val3);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AA //    if (val > 10)
; 0000 00AB         lcd_putchar(48 + val2);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AC     lcd_putchar(48 + val1);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AD 
; 0000 00AE //    for(i = j; i < 3; i++)
; 0000 00AF //		lcd_putchar(48 + str[i]);
; 0000 00B0 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;void lcd_out(void)
; 0000 00B3 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B4     lcd_clear();
;PCODE: $000000A1 VOL: 0
; 0000 00B5 
; 0000 00B6 	lcd_puts("Time");
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B7 	if (main_menu == 0)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B8 		lcd_putchar('>');
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B9 	if (main_menu == 1)
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BA 		lcd_putchar('<');
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BB 	if (main_menu == 2)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00BC 		lcd_putchar(' ');
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00BD 
; 0000 00BE 
; 0000 00BF 	if (ch_on)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C0 	{
; 0000 00C1 		lcd_puts("Speed");
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00C2 
; 0000 00C3 		if (main_menu == 0)
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C4 			lcd_putchar(' ');
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00C5 		if (main_menu == 1)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00C6 			lcd_putchar('>');
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C7 		if (main_menu == 2)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00C8 			lcd_putchar('<');
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C9 
; 0000 00CA 		lcd_puts("Depth");
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00CB 
; 0000 00CC 	}
; 0000 00CD 
; 0000 00CE 	lcd_gotoxy(0, 1);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00CF 
; 0000 00D0 	if (time > 0 && TestBit(lock0, 0x08) && main_menu == 0)			lcd_putchar('<');	else	lcd_putchar(' ');
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00D1 	LCDWriteInt(time);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00D2 	if (time < max_time && TestBit(lock0, 0x08) && main_menu == 0)	lcd_putchar('>');	else	lcd_putchar(' ');
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00D3 
; 0000 00D4 	lcd_putchar(' ');
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D5 
; 0000 00D6 	if (ch_on)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00D7 	{
; 0000 00D8 		if (ch_speed > 0 && TestBit(lock0, 0x08) && main_menu == 1)			lcd_putchar('<');	else	lcd_putchar(' ');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00D9 		LCDWriteInt(ch_speed);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00DA 		if (ch_speed < max_speed && TestBit(lock0, 0x08) && main_menu == 1)	lcd_putchar('>');	else	lcd_putchar(' ');
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00DB 
; 0000 00DC 		lcd_putchar(' ');
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00DD 
; 0000 00DE 		if (ch_depth > 0 && TestBit(lock0, 0x08) && main_menu == 2)			lcd_putchar('<');	else	lcd_putchar(' ');
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DF 		LCDWriteInt(ch_depth);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00E0 		if (ch_depth < max_depth && TestBit(lock0, 0x08) && main_menu == 2)	lcd_putchar('>');	else	lcd_putchar(' ');
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00E1 	}
;PCODE: $00000171 VOL: 0
; 0000 00E2 }
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0

	.DSEG
_0xF:
	.BYTE 0x11
;
;// External Interrupt 0 service routine
;//interrupt [EXT_INT0] void ext_int0_isr(void)
;//{
;// Place your code here
;//    if (TestBit(enc, p_l))
;//        dir = 2;
;//    else
;//        dir = 0;
;//    if (e2 < 2)
;//        e1++;
;//    else
;//    {
;//        dir = 2;
;//        e1 = 0;
;//        e2 = 0;
;//    }
;//}
;
;// External Interrupt 1 service routine
;//interrupt [EXT_INT1] void ext_int1_isr(void)
;//{
;// Place your code here
;//	if (e1 < 2)
;//        e2++;
;//    else
;//    {
;//        dir = 0;
;//        e1 = 0;
;//        e2 = 0;
;//    }
;//}
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0106 {

	.CSEG
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0107 // Place your code here
; 0000 0108     if (TestBit(enc, p_r) && TestBit(enc, p_l))
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0109         e1 = 0;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 010A     if (!TestBit(enc, p_r) && TestBit(enc, p_l))
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 010B         e1 = 1;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 010C     if (!TestBit(enc, p_r) && !TestBit(enc, p_l))
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 010D         e1 = 2;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 010E     if (TestBit(enc, p_r) && !TestBit(enc, p_l))
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 010F         e1 = 3;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0110 
; 0000 0111     switch (e2)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0112     {
; 0000 0113         case 0: if (e1 == 1)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0114                     dir = 0;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0115                 if (e1 == 3)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0116                     dir = 2;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0117                 break;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0118         case 1: if (e1 == 2)
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0119                     dir = 0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 011A                 if (e1 == 0)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 011B                     dir = 2;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 011C                 break;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 011D         case 2: if (e1 == 3)
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 011E                     dir = 0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 011F                 if (e1 == 1)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0120                     dir = 2;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0121                 break;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0122         case 3: if (e1 == 0)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0123                     dir = 0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0124                 if (e1 == 2)
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0125                     dir = 2;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0126                 break;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0127     }
;PCODE: $000001EB VOL: 0
; 0000 0128 
; 0000 0129     e2 = e1;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 012A }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 012D {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 012E 	if (TestBit(lock0, 0x04))
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 012F 		dp_cnt++;
;PCODE: $000001F6 VOL: 0
; 0000 0130 	else
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0131 		dp_cnt--;
;PCODE: $000001F9 VOL: 0
; 0000 0132 
; 0000 0133 	if (dp_cnt == ch_depth * 2)
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0134 			ClrBit(lock0, 0x04);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0135 	if (dp_cnt == 0)
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0136 			SetBit(lock0, 0x04);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0137 
; 0000 0138 	setRes(time + dp_cnt - ch_depth);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0139 
; 0000 013A //	if (!TestBit(PINB, 8))
; 0000 013B //		SetBit(PORTB, 8);
; 0000 013C //	else
; 0000 013D //		ClrBit(PORTB, 8);
; 0000 013E }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;
;void main(void)
; 0000 0141 {
;PCODE: $00000211 VOL: 0
; 0000 0142 // Declare your local variables here
; 0000 0143 
; 0000 0144 // Crystal Oscillator division factor: 1
; 0000 0145 #pragma optsize-
; 0000 0146 CLKPR=0x80;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0147 CLKPR=0x00;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0148 #ifdef _OPTIMIZE_SIZE_
; 0000 0149 #pragma optsize+
; 0000 014A #endif
; 0000 014B 
; 0000 014C // Input/Output Ports initialization
; 0000 014D // Port A initialization
; 0000 014E // Func2=In Func1=In Func0=In
; 0000 014F // State2=T State1=T State0=T
; 0000 0150 PORTA=0x00;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0151 DDRA=0x00;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0152 
; 0000 0153 // Port B initialization
; 0000 0154 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0155 // State7=0 State6=0 State5=0 State4=0 State3=1 State2=0 State1=0 State0=0
; 0000 0156 PORTB=0x08;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0157 DDRB=0xFF;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0158 
; 0000 0159 // Port D initialization
; 0000 015A // Func6=Out Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 015B // State6=0 State5=0 State4=P State3=P State2=P State1=P State0=P
; 0000 015C PORTD=0x00;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 015D DDRD=0x60;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 015E 
; 0000 015F 
; 0000 0160 // Timer/Counter 0 initialization
; 0000 0161 // Clock source: System Clock
; 0000 0162 // Clock value: 1000,000 kHz
; 0000 0163 // Mode: Normal top=FFh
; 0000 0164 // OC0A output: Disconnected
; 0000 0165 // OC0B output: Disconnected
; 0000 0166 TCCR0A=0x00;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0167 TCCR0B=0x02;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0168 TCNT0=0x00;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0169 OCR0A=0x00;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 016A OCR0B=0x00;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 016B 
; 0000 016C // Timer/Counter 1 initialization
; 0000 016D // Clock source: System Clock
; 0000 016E // Clock value: 8000,000 kHz
; 0000 016F // Mode: CTC top=OCR1A
; 0000 0170 // OC1A output: Discon.
; 0000 0171 // OC1B output: Discon.
; 0000 0172 // Noise Canceler: Off
; 0000 0173 // Input Capture on Falling Edge
; 0000 0174 // Timer1 Overflow Interrupt: Off
; 0000 0175 // Input Capture Interrupt: Off
; 0000 0176 // Compare A Match Interrupt: On
; 0000 0177 // Compare B Match Interrupt: Off
; 0000 0178 TCCR1A=0x00;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0179 TCCR1B=0x00;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 017A TCNT1H=0x00;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 017B TCNT1L=0x00;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 017C ICR1H=0x00;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 017D ICR1L=0x00;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 017E OCR1A=0x0FF0;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 017F //OCR1AL=0xFF;
; 0000 0180 OCR1BH=0x00;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0181 OCR1BL=0x00;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0182 
; 0000 0183 // External Interrupt(s) initialization
; 0000 0184 // INT0: On
; 0000 0185 // INT0 Mode: Falling Edge
; 0000 0186 // INT1: Off
; 0000 0187 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0188 //GIMSK=0x40;
; 0000 0189 //MCUCR=0x02;
; 0000 018A //EIFR=0x40;
; 0000 018B 
; 0000 018C GIMSK=0x00;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 018D MCUCR=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 018E EIFR=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 018F 
; 0000 0190 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0191 TIMSK=0x42;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0192 
; 0000 0193 // Universal Serial Interface initialization
; 0000 0194 // Mode: Disabled
; 0000 0195 // Clock source: Register & Counter=no clk.
; 0000 0196 // USI Counter Overflow Interrupt: Off
; 0000 0197 USICR=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0198 
; 0000 0199 // Analog Comparator initialization
; 0000 019A // Analog Comparator: Off
; 0000 019B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 019C ACSR=0x80;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 019D 
; 0000 019E // LCD module initialization
; 0000 019F lcd_init(16);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 01A0 
; 0000 01A1 delay_ms(100);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 01A2 
; 0000 01A3 lcd_out();
;PCODE: $00000250 VOL: 0
; 0000 01A4 // Global enable interrupts
; 0000 01A5 #asm("sei")
;PCODE: $00000251 VOL: 0
	sei
;PCODE: $00000252 VOL: 0
; 0000 01A6 
; 0000 01A7 setRes(time);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 01A8 
; 0000 01A9 while (1)
;PCODE: $00000255 VOL: 0
; 0000 01AA {
; 0000 01AB     if (dir != 1)
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01AC     {
; 0000 01AD         if (TestBit(lock0, 0x08))
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01AE 		{
; 0000 01AF 			switch (main_menu)
;PCODE: $0000025C VOL: 0
; 0000 01B0 			{
; 0000 01B1 				case 0:
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 01B2                     if (dir == 0)
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01B3                     {
; 0000 01B4 					    if (time > ch_depth)
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01B5     						time--;
;PCODE: $00000265 VOL: 0
; 0000 01B6                     }
;PCODE: $00000266 VOL: 0
; 0000 01B7                     else
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01B8                         if (time < 0xFF - ch_depth)
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 01B9 						    time++;
;PCODE: $0000026D VOL: 0
; 0000 01BA     				setRes(time);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01BB 					break;
;PCODE: $00000272 VOL: 0
; 0000 01BC 				case 1:
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01BD                     if (dir == 0)
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01BE                     {
; 0000 01BF 					    if (ch_speed > min_speed)
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01C0     						ch_speed--;
;PCODE: $0000027C VOL: 0
; 0000 01C1                     }
;PCODE: $0000027D VOL: 0
; 0000 01C2                     else
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01C3                         if (ch_speed < max_speed)
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01C4 						    ch_speed++;
;PCODE: $00000283 VOL: 0
; 0000 01C5                     OCR1A = (unsigned int)ch_speed << 4;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01C6 					break;
;PCODE: $0000028A VOL: 0
; 0000 01C7 				case 2:
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01C8                     if (dir == 0)
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 01C9                     {
; 0000 01CA 					    if (ch_depth > 0)
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01CB     						ch_depth--;
;PCODE: $00000294 VOL: 0
; 0000 01CC                     }
;PCODE: $00000295 VOL: 0
; 0000 01CD                     else
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01CE                         if (ch_depth < max_depth)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01CF 						    ch_depth++;
;PCODE: $0000029B VOL: 0
; 0000 01D0 					break;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01D1 			};
;PCODE: $0000029F VOL: 0
; 0000 01D2 		}
; 0000 01D3 		else
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01D4         {
; 0000 01D5             if (dir == 0)
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01D6             {
; 0000 01D7     			if (main_menu > 0)
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01D8     				main_menu--;
;PCODE: $000002A8 VOL: 0
; 0000 01D9     			else
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01DA     				main_menu = max_menu;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01DB             }
;PCODE: $000002AD VOL: 0
; 0000 01DC             else
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01DD 				if (main_menu < max_menu)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01DE 					main_menu++;
;PCODE: $000002B3 VOL: 0
; 0000 01DF 				else
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01E0 					main_menu = 0;
;PCODE: $000002B6 VOL: 0
; 0000 01E1         }
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01E2         dir = 1;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01E3 		lcd_out();
;PCODE: $000002BC VOL: 0
; 0000 01E4     }
; 0000 01E5 
; 0000 01E6 	if (!TestBit(enc, p_c))
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01E7 	{
; 0000 01E8 		if (!TestBit(lock0, 0x01))
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 01E9 		{
; 0000 01EA 			SetBit(lock0, 0x01);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01EB 			if (ch_on)
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01EC                 chorus_off();
;PCODE: $000002CA VOL: 0
; 0000 01ED 			else
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01EE                 chorus_on();
;PCODE: $000002CD VOL: 0
; 0000 01EF 			lcd_out();
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01F0 		}
; 0000 01F1 	}
;PCODE: $000002D0 VOL: 0
; 0000 01F2 	else
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01F3 		ClrBit(lock0, 0x01);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01F4 
; 0000 01F5 	if (!TestBit(enc, p_e))
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01F6 	{
; 0000 01F7 		if (!TestBit(lock0, 0x02))
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 01F8 		{
; 0000 01F9 			SetBit(lock0, 0x02);
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01FA 			if (!TestBit(lock0, 0x08))
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01FB 				SetBit(lock0, 0x08);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 01FC 			else
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01FD 				ClrBit(lock0, 0x08);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 01FE 			lcd_out();
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01FF 		}
; 0000 0200 	}
;PCODE: $000002ED VOL: 0
; 0000 0201 	else
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0202 		ClrBit(lock0, 0x02);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0203 }
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0204 }
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
