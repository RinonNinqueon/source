;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10.06.2016
;Author  : NeVaDa
;Company : SBE Software
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;//FUSES: 0xDE 0xD9 0xFF
;//-U lfuse:w:0xde:m -U hfuse:w:0xd9:m -U efuse:w:0xff:m
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;//#define _display_err_
;//#include <Math.h>
;
;
;// 1 Wire Bus functions
;#asm
;PCODE: $0000000A VOL: 0
   .equ __w1_port=0x18 ;PORTB
;PCODE: $0000000B VOL: 0
   .equ __w1_bit=0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0025 #endasm
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds18b20_cli.h>
;
;// maximum number of DS1820 devices
;// connected to the 1 Wire bus
;#define MAX_DS1820 2
;// number of DS1820 devices
;// connected to the 1 Wire bus
;unsigned char ds1820_devices;
;// DS1820 devices ROM code storage area,
;// 9 bytes are used for each device
;// (see the w1_search function description in the help)
;unsigned char ds1820_rom_codes[MAX_DS1820][9];
;
;#define SetBit(x,y) (x|=y)
;#define ClrBit(x,y) (x&=~y)
;#define TestBit(x,y) (x&y)
;
;#define port_sh PORTB
;#define pin_sh  0x02
;#define pin_st  0x04
;#define pin_d   0x08
;
;#define port_ds PORTD
;#define led1    0x10
;#define led2    0x20
;#define led3    0x40
;#define button  0x02
;#define jumper  0x01
;#define led_rd  0x04
;#define led_gr  0x08
;
;//Массив для 74HC595 -> Семисегментник || 0-7 = A-G+DP
;flash unsigned char leds[12] = {
; 0b11011011,        //0
; 0b00001010,        //1
; 0b11000111,        //2
; 0b01001111,        //3
; 0b00011110,        //4
; 0b01011101,        //5
; 0b11011101,        //6
; 0b00001011,        //7
; 0b11011111,        //8
; 0b01011111,         //9
; 0b11010101,        //E
; 0b10000100};       //r
;//unsigned char rom[8];
;
;unsigned int temp = 19, t_old;    //Температура
;bit term = 0;           //Текущий датчик (из двух)
;bit pause = 0;          //1 -- уже нажали кнопку, таймер установлен чуть больше
;bit minus = 0;
;unsigned char out = 0;    //Переменная для вывода одного числа на семисегментник
;unsigned char i = 0;    //Инкремент
;unsigned char j = led1;    //Инкремент
;//unsigned char o1 = 0;   //out для знаков
;
;//Функция работы со сдвиговым регистром 74HC595
;void inline shift_out(unsigned char data)
; 0000 0063 {

	.CSEG
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0064     ClrBit(port_sh, pin_st);
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0065     ClrBit(port_sh, pin_sh);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0066 
; 0000 0067 	for(i = 0; i < 8; i++)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0068 	{
; 0000 0069 		if(data & 0x80)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006A 			SetBit(port_sh, pin_d);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006B 		else
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 006C 			ClrBit(port_sh, pin_d);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 006D 
; 0000 006E 		SetBit(port_sh, pin_sh);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 006F 
; 0000 0070 		ClrBit(port_sh, pin_sh);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0071 		data <<= 1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0072 	}
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0073 
; 0000 0074     SetBit(port_sh, pin_st);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0075 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 007A {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 007B     ClrBit(port_ds, 0b01110000);     //ВЫКЛ все
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 007C 
; 0000 007D     switch (j)
;PCODE: $0000003A VOL: 0
; 0000 007E     {
; 0000 007F     case led1:
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0080         #ifdef _display_err_
; 0000 0081         if (temp == 0xFFF)
; 0000 0082         {
; 0000 0083             out = leds[10];
; 0000 0084             break;
; 0000 0085         }
; 0000 0086         #endif
; 0000 0087 
; 0000 0088         out = 0x04 * minus;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0089 
; 0000 008A         if (term)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 008B         {
; 0000 008C             ClrBit(port_ds, led_gr);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 008D             SetBit(port_ds, led_rd);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 008E         }
; 0000 008F         else
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0090         {
; 0000 0091             ClrBit(port_ds, led_rd);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0092             SetBit(port_ds, led_gr);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0093         }
;PCODE: $0000004E VOL: 0
; 0000 0094 
; 0000 0095         break;
;PCODE: $0000004F VOL: 0
; 0000 0096 
; 0000 0097     case led2:
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0098         #ifdef _display_err_
; 0000 0099         if (temp == 0xFFF)
; 0000 009A         {
; 0000 009B             out = leds[11];
; 0000 009C             break;
; 0000 009D         }
; 0000 009E         #endif
; 0000 009F 
; 0000 00A0         out = t_old / 10;        //Десятки
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A1 
; 0000 00A2         out = leds[out];        //Вывод числа через массив
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A3         break;
;PCODE: $0000005B VOL: 0
; 0000 00A4 
; 0000 00A5     case led3:
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00A6         #ifdef _display_err_
; 0000 00A7         if (temp == 0xFFF)
; 0000 00A8         {
; 0000 00A9             out = leds[11];
; 0000 00AA             break;
; 0000 00AB         }
; 0000 00AC         #endif
; 0000 00AD 
; 0000 00AE         out = t_old % 10;        //Единицы
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00AF 
; 0000 00B0         out = leds[out];        //Вывод числа через массив
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B1         break;
;PCODE: $00000067 VOL: 0
; 0000 00B2     }
;PCODE: $00000068 VOL: 0
; 0000 00B3 
; 0000 00B4     shift_out(out);         //выводим на индикатор
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00B5     SetBit(port_ds, j);     //ВКЛ
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00B6 
; 0000 00B7     j <<= 1;                //меняем индикатор
;PCODE: $0000006E VOL: 0
; 0000 00B8     if (j > led3)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00B9         j = led1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00BA }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00BE {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00BF // Place your code here
; 0000 00C0     //Если была нажата кнопка, уже подождали много
; 0000 00C1     if (pause)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00C2     {
; 0000 00C3         TCCR1B=0x02;        //Таймер побыстрее
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C4         pause = 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C5     }
; 0000 00C6 
; 0000 00C7     //Кнопарь
; 0000 00C8     if (!TestBit(PIND, button))
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C9     {
; 0000 00CA         term = ~term;       //Меняем датчик
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CB         TCCR1B=0x03;        //Таймер помедленнее
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00CC         pause = 1;          //Нажали
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00CD     }
; 0000 00CE }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00D3 {
;PCODE: $00000097 VOL: 0
; 0000 00D4 // Declare your local variables here
; 0000 00D5 // Input/Output Ports initialization
; 0000 00D6 // Port A initialization
; 0000 00D7 // Func2=In Func1=In Func0=In
; 0000 00D8 // State2=T State1=T State0=T
; 0000 00D9 PORTA=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00DA DDRA=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00DB 
; 0000 00DC // Port B initialization
; 0000 00DD // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
; 0000 00DE // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=T
; 0000 00DF PORTB=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E0 DDRB=0xFE;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00E1 
; 0000 00E2 // Port D initialization
; 0000 00E3 // Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 00E4 // State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
; 0000 00E5 PORTD=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00E6 DDRD=0x7C;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00E7 
; 0000 00E8 // Timer/Counter 0 initialization
; 0000 00E9 // Clock source: System Clock
; 0000 00EA // Clock value: 7,813 kHz
; 0000 00EB // Mode: Normal top=FFh
; 0000 00EC // OC0A output: Disconnected
; 0000 00ED // OC0B output: Disconnected
; 0000 00EE TCCR0A=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00EF TCCR0B=0x02;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00F0 TCNT0=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00F1 OCR0A=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00F2 OCR0B=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00F3 
; 0000 00F4 // Timer/Counter 1 initialization
; 0000 00F5 // Clock source: System Clock
; 0000 00F6 // Clock value: 7,813 kHz
; 0000 00F7 // Mode: Normal top=FFFFh
; 0000 00F8 // OC1A output: Discon.
; 0000 00F9 // OC1B output: Discon.
; 0000 00FA // Noise Canceler: Off
; 0000 00FB // Input Capture on Falling Edge
; 0000 00FC // Timer1 Overflow Interrupt: On
; 0000 00FD // Input Capture Interrupt: Off
; 0000 00FE // Compare A Match Interrupt: Off
; 0000 00FF // Compare B Match Interrupt: Off
; 0000 0100 TCCR1A=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0101 TCCR1B=0x02;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0102 TCNT1H=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0103 TCNT1L=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0104 ICR1H=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0105 ICR1L=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0106 OCR1AH=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0107 OCR1AL=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0108 OCR1BH=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0109 OCR1BL=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 010A 
; 0000 010B // External Interrupt(s) initialization
; 0000 010C // INT0: Off
; 0000 010D // INT1: Off
; 0000 010E // Interrupt on any change on pins PCINT0-7: Off
; 0000 010F GIMSK=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0110 MCUCR=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0111 
; 0000 0112 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0113 TIMSK=0x82;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0114 //TIMSK=0x00;
; 0000 0115 
; 0000 0116 // Universal Serial Interface initialization
; 0000 0117 // Mode: Disabled
; 0000 0118 // Clock source: Register & Counter=no clk.
; 0000 0119 // USI Counter Overflow Interrupt: Off
; 0000 011A USICR=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 011B 
; 0000 011C // Analog Comparator initialization
; 0000 011D // Analog Comparator: Off
; 0000 011E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 011F ACSR=0x80;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0120 
; 0000 0121 // Determine the number of DS1820 devices
; 0000 0122 // connected to the 1 Wire bus
; 0000 0123 
; 0000 0124 ds1820_devices=w1_search(0xf0, ds1820_rom_codes);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0125 
; 0000 0126 //Инициализация двух датчиков
; 0000 0127 ds18b20_init( &ds1820_rom_codes[0][0], -30, 60, DS18B20_9BIT_RES);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0128 ds18b20_init( &ds1820_rom_codes[1][0], -30, 60, DS18B20_9BIT_RES);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0129 
; 0000 012A // Global enable interrupts
; 0000 012B #asm("sei")
;PCODE: $000000E5 VOL: 0
	sei
;PCODE: $000000E6 VOL: 0
; 0000 012C 
; 0000 012D while (1)
;PCODE: $000000E7 VOL: 0
; 0000 012E       {
; 0000 012F         if (TestBit(PIND, jumper))
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0130             temp = ds18b20_temperature1(&ds1820_rom_codes[~term][0]);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0131         else
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0132             temp = ds18b20_temperature1(&ds1820_rom_codes[term][0]);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0133 
; 0000 0134         #asm("cli")
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
	cli
;PCODE: $000000FF VOL: 0
; 0000 0135 
; 0000 0136         if (temp != 0xFFF)
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0137         {
; 0000 0138             if ((temp & 0x8000) == 0)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0139                 minus = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 013A             else
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 013B             {
; 0000 013C                 minus = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 013D                 temp = ~temp + 1;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 013E             }
;PCODE: $00000110 VOL: 0
; 0000 013F 
; 0000 0140             temp = (unsigned char)(temp >> 4);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0141             t_old = temp;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0142         }
; 0000 0143 
; 0000 0144         #asm("sei")
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
	sei
;PCODE: $00000119 VOL: 0
; 0000 0145       };
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0146 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
