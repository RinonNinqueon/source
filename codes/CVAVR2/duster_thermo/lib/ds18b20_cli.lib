/*
  CodeVisionAVR C Compiler
  (C) 1998-2007 Pavel Haiduc, HP InfoTech S.R.L.

  Dallas Semiconductor DS18B20 1 Wire bus temperature sensor functions
*/

#include <delay.h>
#include <ds18b20_cli.h>
       
struct __ds18b20_scratch_pad_struct __ds18b20_scratch_pad;

// temp. conversion time [ms] depending on the resolution
static flash int conv_delay[4]={100,200,400,800};
// valid temp. bit mask depending on the resolution
static flash unsigned bit_mask[4]={0xFFF8,0xFFFC,0xFFFE,0xFFFF};

unsigned char ds18b20_select(unsigned char *addr)
{
unsigned char i;
#asm("cli");
if (w1_init()==0)
{
	return 0;
}
if (addr)
   {
   w1_write(0x55);
   #asm("sei");
   i=0;
   do
   {
	 #asm("cli");    
     w1_write(*addr);
	 #asm("sei");
	 addr++;
   }
   while (++i<8);
   }
else
{
	#asm("cli");
	w1_write(0xCC);
	#asm("sei");
}
return 1;
}

unsigned char ds18b20_read_spd(unsigned char *addr)
{
unsigned char i;
unsigned char *p;
if (ds18b20_select(addr)==0)
{
	return 0;
}
#asm("cli");
w1_write(0xBE);
#asm("sei");
i=0;
p=(char *) &__ds18b20_scratch_pad;
do
{
	#asm("cli");
  *(p++)=w1_read();
  #asm("sei");
}
while (++i<9);
return !w1_dow_crc8(&__ds18b20_scratch_pad,9);
}

float ds18b20_temperature(unsigned char *addr)
{
unsigned char resolution;
if (ds18b20_read_spd(addr)==0)
{
	return -9999;
}
resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
if (ds18b20_select(addr)==0)
{
	return -9999;
}
#asm("cli");
w1_write(0x44);
#asm("sei");
delay_ms(1000);
if (ds18b20_read_spd(addr)==0)
{
	return -9999;
}
#asm("cli");
w1_init();
#asm("sei");
return (*((int *) &__ds18b20_scratch_pad.temp_lsb) & ((int) bit_mask[resolution]))*0.0625;
}

unsigned int ds18b20_temperature1(unsigned char *addr)
{
unsigned char resolution;
unsigned int t;
if (ds18b20_read_spd(addr)==0)
{
	return 0xFFF;
}
//resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
if (ds18b20_select(addr)==0)
{
	return 0xFFF;
}
#asm("cli");
w1_write(0x44);
#asm("sei");
delay_ms(1000);
if (ds18b20_read_spd(addr)==0)
{
	return 0xFFF;
}
//#asm("cli");
w1_init();
//#asm("sei");
t = (unsigned int)__ds18b20_scratch_pad.temp_lsb;
t |= ((unsigned int)__ds18b20_scratch_pad.temp_msb << 8);
return t;
}
                          
unsigned char ds18b20_init(unsigned char *addr,signed char temp_low,signed char temp_high, unsigned char resolution)
{
if (ds18b20_select(addr)==0)
{
	return 0;
}
resolution=(resolution<<5) | 0x1f;
#asm("cli");
w1_write(0x4e);
w1_write(temp_high);
w1_write(temp_low);
w1_write(resolution);

if (ds18b20_read_spd(addr)==0) return 0;
if ((__ds18b20_scratch_pad.temp_low!=temp_low) ||
   (__ds18b20_scratch_pad.temp_high!=temp_high) ||
   (__ds18b20_scratch_pad.conf_register!=resolution)) return 0;
if (ds18b20_select(addr)==0) return 0;
w1_write(0x48);
delay_ms(15);
return w1_init();
}